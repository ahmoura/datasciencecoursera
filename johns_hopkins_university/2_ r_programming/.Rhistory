#
ggplot(df, aes(data, value, colour = variable)) +
geom_line(aes(linetype=variable), size=1) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 50))
#
ggplot(df, aes(data, value, group = variable, colour = variable)) +
geom_line(aes(linetype=variable), size=1) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 50))
#
ggplot(df, aes(data, value, group = variable, colour = variable)) +
geom_line(aes(linetype=variable), size=1) +
geom_point(size=5) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 50))
#
ggplot(df, aes(data, value, group = variable, colour = variable)) +
geom_line(aes(linetype=variable), size=1) +
geom_point(size=1) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 50))
View(df)
df <- df[year(2019)]
df <- df[year(df$data) == 2019]
df <- df %>%
filter(year(data) == 2019)
#
ggplot(df, aes(data, value, group = variable, colour = variable)) +
geom_line(aes(linetype=variable), size=1) +
geom_point(size=1) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 50))
#
ggplot(df, aes(data, value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=1) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 50))
#
ggplot(df, aes(data, value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=2) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 50))
#
ggplot(df, aes(data, value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=2) +
scale_x_discrete(breaks = seq(0, max(df$value, na.rm = TRUE), 2))
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 500))
#
ggplot(df, aes(data, value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=2) +
scale_x_discrete(breaks = seq(0, max(df$value, na.rm = TRUE), 2))
#
ggplot(df, aes(data, value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=2) +
scale_x_discrete(breaks = seq(0, max(df$value, na.rm = TRUE), 2)) +
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 500))
#
ggplot(df, aes(data, value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=2) +
scale_x_discrete(breaks = seq(0, max(df$value, na.rm = TRUE), 2)) +
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 250))
#
ggplot(df, aes(data, value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=2) +
scale_x_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 2)) +
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 250))
#
ggplot(df, aes(data, value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=2) +
labs(x = NULL, y = NULL) +
scale_x_discrete() +
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 250))
#
df <- df_cursos_matriculados_qualificados.csv
df <- melt(df, id = c("X","nome_curso"))
#
ggplot(df, aes(nome_curso, value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
coord_flip() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_line(colour = "grey90")) +
scale_fill_brewer() +
scale_x_discrete(labels = function(x) str_wrap(x, width = 50)) +
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 1000))
#
ggplot(df, aes(nome_curso, value, fill = variable)) +
geom_bar(stat = "identity", position = "dodge") +
coord_flip() +
labs(x = NULL, y = NULL) +
theme(
panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_line(colour = "grey90")) +
scale_fill_brewer() +
scale_x_discrete(labels = function(x) str_wrap(x, width = 50)) +
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 1000))
#
df <- df_resumo_por_dia.csv
df <- melt(df, id = c("X","data"))
df <- df %>%
filter(year(data) == 2019)
#
ggplot(df, aes(data, value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=2) +
scale_x_discrete() +
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 250))
#
ggplot(df, aes(data, value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=2) +
scale_x_discrete(labels = abbreviate) +
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 250))
df <- format(data, format="%m-%d")
#
df <- df_resumo_por_dia.csv
df <- melt(df, id = c("X","data"))
df <- df %>%
filter(year(data) == 2019)
df$data <- format(data, format="%m-%d")
#
df <- df_resumo_por_dia.csv
df <- melt(df, id = c("X","data"))
df <- df %>%
filter(year(data) == 2019)
df$data <- format(data, format="%m-%d")
df <- df %>%
filter(year(data) == 2019) %>%
arrange()
df$data <- format(df$data, format="%m-%d")
#
df <- df_resumo_por_dia.csv
df <- melt(df, id = c("X","data"))
df <- df %>%
filter(year(data) == 2019) %>%
arrange()
df$data <- format(df$data, format="%m-%d")
df$data <- format(as.Date(df$data, tryFormats = "%Y-%m-%d"), format="%m-%d")
#
ggplot(df, aes(data, value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=2) +
scale_x_discrete(labels = abbreviate) +
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 250))
#
df <- df_resumo_por_dia.csv
df <- melt(df, id = c("X","data"))
df <- df %>%
filter(year(data) == 2019) %>%
arrange()
df$data <- format(as.Date(df$data, tryFormats = "%Y-%m-%d"), format="%m/%d")
#
df <- df_resumo_por_dia.csv
df <- melt(df, id = c("X","data"))
df <- df %>%
filter(year(data) == 2019) %>%
arrange()
df$data <- format(as.Date(df$data, tryFormats = "%Y-%m-%d"), format="%d/%m")
#
ggplot(df, aes(data, value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=2) +
scale_x_discrete(breaks = levels(df$data)[] , labels = abbreviate) +
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 250))
#
ggplot(df, aes(data, value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=2) +
scale_x_discrete(breaks = levels(df$data)[c(T, rep(F, 9))] , labels = abbreviate) +
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 250))
#
ggplot(df, aes(data, value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=2) +
scale_x_discrete(breaks = levels(df$data)[1:4] , labels = abbreviate) +
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 250))
#
ggplot(df, aes(data, value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=2) +
scale_x_discrete(breaks = levels(df$data)[,1:4] , labels = abbreviate) +
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 250))
#
ggplot(df, aes(data, value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=2) +
scale_x_discrete(breaks = levels(df$data)[1:4,] , labels = abbreviate) +
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 250))
#
ggplot(df, aes(as.Date(data), value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=2) +
scale_x_discrete(breaks = levels(df$data)[] , labels = abbreviate) +
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 250))
#
ggplot(df, aes(as.Date(data, tryFormats = "%d/%m"), value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=2) +
scale_x_discrete(breaks = levels(df$data)[] , labels = abbreviate) +
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 250))
#
ggplot(df, aes((data), value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=2) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 2)) +
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 250))
#
ggplot(df, aes((data), value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=2) +
scale_x_discrete(labels = function(x) str_wrap(x, width = 1)) +
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 250))
#
ggplot(df, aes((data), value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=2) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 250))
#
ggplot(df, aes(data, value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=2) +
theme(axis.title.x = element_blank(),
axis.title.y = "element_blank()",
panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_line(colour = "grey90"),
axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 250))
#
ggplot(df, aes(data, value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=2) +
ylab("Quantidade de pessoas")
#
ggplot(df, aes(data, value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=2) +
ylab("Quantidade de pessoas") +
theme(axis.title.x = element_blank(),
panel.background = element_rect(fill = "white"),
panel.grid.major.y = element_line(colour = "grey90"),
axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 250))
#
ggplot(df, aes(data, value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=2) +
scale_fill_brewer() +
ylab("Quantidade de pessoas") +
theme(axis.title.x = element_blank(),
panel.background = element_rect(fill = "white"),
panel.grid.major.y = element_line(colour = "grey90"),
axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 250))
#
ggplot(df, aes(nome_curso, value, fill = variable, colours( = variable))) +
geom_bar(stat = "identity", position = "dodge") +
coord_flip() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_line(colour = "grey90")) +
scale_fill_brewer() +
scale_x_discrete(labels = function(x) str_wrap(x, width = 50)) +
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 1000))
#
ggplot(df, aes(nome_curso, value, fill = variable, colours = variable)) +
geom_bar(stat = "identity", position = "dodge") +
coord_flip() +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.background = element_rect(fill = "white"),
panel.grid.major.x = element_line(colour = "grey90")) +
scale_fill_brewer() +
scale_x_discrete(labels = function(x) str_wrap(x, width = 50)) +
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 1000))
#
ggplot(df, aes(data, value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=2) +
scale_colour_gradientn(colours=rainbow(4)) +
ylab("Quantidade de pessoas") +
theme(axis.title.x = element_blank(),
panel.background = element_rect(fill = "white"),
panel.grid.major.y = element_line(colour = "grey90"),
axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 250))
#
ggplot(df, aes(data, value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=2) +
ylab("Quantidade de pessoas") +
theme(axis.title.x = element_blank(),
panel.background = element_rect(fill = "white"),
panel.grid.major.y = element_line(colour = "grey90"),
axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 250))
#
ggplot(df, aes(data, value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=2) +
scale_colour_manual(colours= c("#5F4B8B","#5F4B8B","#5F4B8B")) +
ylab("Quantidade de pessoas") +
theme(axis.title.x = element_blank(),
panel.background = element_rect(fill = "white"),
panel.grid.major.y = element_line(colour = "grey90"),
axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 250))
#
ggplot(df, aes(data, value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=2) +
scale_fill_manual(values = c("#5F4B8B","#5F4B8B","#5F4B8B")) +
ylab("Quantidade de pessoas") +
theme(axis.title.x = element_blank(),
panel.background = element_rect(fill = "white"),
panel.grid.major.y = element_line(colour = "grey90"),
axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 250))
#
ggplot(df, aes(data, value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=2) +
ylab("Quantidade de pessoas") +
scale_color_brewer(palette = "Dark2") +
theme(axis.title.x = element_blank(),
panel.background = element_rect(fill = "white"),
panel.grid.major.y = element_line(colour = "grey90"),
axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 250))
#
ggplot(df, aes(data, value, group = variable, colour = variable)) +
geom_line(size=1) +
geom_point(size=2) +
ylab("Quantidade de pessoas") +
scale_color_brewer() +
theme(axis.title.x = element_blank(),
panel.background = element_rect(fill = "white"),
panel.grid.major.y = element_line(colour = "grey90"),
axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_y_continuous(breaks = seq(0, max(df$value, na.rm = TRUE), 250))
runApp('Documentos/IBICT/r_shiny_test/ibict_example')
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ', 'devtools', 'uuid', 'digest'))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()
shiny::runApp('Documentos/IBICT/shiny')
install.packages("tidyverse")
runApp('Documentos/IBICT/shiny')
install.packages("rvest")
bases = listOMLDataSets()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("OpenML")
install.packages("swirl")
packageVersion("swirl")
getdw()
getwd()
packageVersion("swirl")
library(swirl)
install.packages("swirl")
swirl()
swirl()
packageVersion("swirl")
packageVersion("swirl")
library(swirl)
library(swirl)
install.packages("swirl")
install.packages("RCurl")
db <- readRDS("brasil_dados_basicos.rds")
getwd()
setwd("/home/ahmoura/Documentos/cnj")
db <- readRDS("brasil_dados_basicos.rds")
setwd("/home/ahmoura/Documentos/courseradatascience")
setwd("/home/ahmoura/Documentos/datasciencecoursera")
setwd("/home/ahmoura/Documentos/datasciencecoursera/specdata")
setwd("/home/ahmoura/Documentos/datasciencecoursera/r_programming/specdata")
pollutantmean <- function(directory, pollutant, id = 1:332) {
# Get full path of the specsdata folder
directory <- paste(getwd(),"/",directory,"/",sep="")
# Aux variables
file_list <- list.files(directory)
data <- NA
#For each id passed as parameter:
for (i in id) {
#Read the file,
file_dir <- paste(directory,file_list[i],sep="")
file_data <- read.csv(file_dir)
# accumulate the data
data <- rbind(data,file_data)
}
# Calculate the mean and return it
mean(data[[pollutant]],na.rm = TRUE)
}
setwd("/home/ahmoura/Documentos/datasciencecoursera/r_programming")
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
pollutantmean("specdata", "nitrate",23)
pollutantmean("specdata", "nitrate",34)
pollutantmean("specdata", "nitrate")
pollutantmean <- function(directory, pollutant, id = 1:332)
{
#create a list of files
files_full <- list.files(directory, full.names = TRUE)
# create an empty data frame
dat <- data.frame()
for (i in id)
{
#add files to main data
dat <- rbind(dat, read.csv(files_full[i]))
}
#Calulate mean
mean_data <- mean(dat[, pollutant], na.rm = TRUE)
return(mean_data)
}
pollutantmean("specdata", "nitrate")
pollutantmean("specdata", "nitrate",1:30)
pollutantmean("specdata", "nitrate",1:34)
pollutantmean("specdata", "nitrate",1:23)
pollutantmean("specdata", "nitrate",0)
pollutantmean("specdata", "nitrate", 0)
pollutantmean("specdata", "nitrate", 1)
pollutantmean("specdata", "nitrate", 11/23)
pollutantmean("specdata", "nitrate", 1:23)
pollutantmean("specdata", "nitrate", 1:34)
pollutantmean("specdata", "nitrate", 1:34)
pollutantmean("specdata", "nitrate", 34)
complete <- function(directory, id = 1:332)
{
#Create a list of file
files_full <- list.files(directory, full.names= TRUE)
# Create empty data frame
dat <- data.frame()
for (i in id)
{
# Read files
temp <- read.csv(files_full[i])
# nobs are sum of all complete cases
nobs <-sum(complete.cases(temp))
# Enamurtates complete cass by index
dat <-rbind(dat, data.frame(i, nobs))
}
colnames(dat) <- c("id", "nobs")
return(dat)
}
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
RNGversion("3.5.1")
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
RNGversion("3.5.1")
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata")
library(Hmisc)
cr <- rcorr("specdata")
cr <- corr("specdata")
cr <- cor("specdata")
cr <- corr("specdata")
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
RNGversion("3.5.1")
corr <- function(directory, threshold = 0)
{
#create list of all files
files_full <- list.files(directory, full.names= TRUE)
# create empty data set
dat <- vector(mode = "numeric", length = 0)
for(i in 1:length(files_full))
{
# Read File
tmp <- read.csv(files_full[i])
#Calculate csum
csum <- sum((!is.na(tmp$sulfate)) & (!is.na(tmp$nitrate)))
if (csum > threshold)
{
#Extract data of niteate and sulfate and calculate correlation between them
sul <- tmp[which(!is.na(tmp$sulfate)), ]
nit <- sul[which(!is.na(sul$nitrate)), ]
dat <- c(dat, cor(nit$sulfate, nit$nitrate))
}
}
dat
}
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
RNGversion("3.5.1")
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata")
cr <- sort(cr)
RNGversion("3.5.1")
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
